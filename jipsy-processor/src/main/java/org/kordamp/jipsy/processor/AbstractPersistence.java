/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2013 - 2022 Andres Almiray.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kordamp.jipsy.processor;

import java.io.File;
import java.io.IOException;
import java.io.Writer;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.stream.Collectors;

/**
 * @author Andres Almiray
 */
public abstract class AbstractPersistence implements Persistence {
    protected final String name;
    protected final String path;
    protected final Logger logger;

    protected AbstractPersistence(String name, Logger logger, String path) {
        this.name = name;
        this.logger = logger;
        this.path = path;
    }

    @Override
    public void writeLog() {
        try {
            String logContent = logger.getFileContent();
            if (logContent != null && !logContent.isEmpty()) {
                write("log" + System.currentTimeMillis() + ".log", logContent);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void write(String name, String value) throws IOException {
        logger.note(LogLocation.BOTH, "Generating file '" + path + name + "'");
        try (Writer writer = createWriter(name)) {
            writer.write("# Generated by " + this.name + "\n");
            writer.write(value);
        }
    }

    @Override
    public Collection<String> tryFind() {
        Collection<String> fileList;
        File dir = determineOutputLocation();
        if (dir == null) {
            fileList = Collections.emptyList();
        } else {
            fileList = listDiscoveredFiles(dir.listFiles(SimpleFileFilter.INSTANCE));
        }
        return fileList;
    }

    /**
     * Convert the array of files into a collection of the the file names.
     *
     * @param list the files to convert
     * @return a collection containing the file names. Possibly an empty collection of the array langth is zero or the
     * array parameter {@code list} is {@code null}.
     */
    private Collection<String> listDiscoveredFiles(File[] list) {
        if (list == null) {
            return Collections.emptyList();
        }

        return Arrays.stream(list).map(File::getName)
            .peek(fileName -> logger.note(LogLocation.LOG_FILE, "Discovered " + fileName))
            .collect(Collectors.toList());
    }

    protected abstract Writer createWriter(String name) throws IOException;
}
